{
  "AWSTemplateFormatVersion" : "2010-09-09",
 
  "Description" : "Cloudformation template with 1",
 
 
  "Mappings" : {   
 
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "Public1"  : { "CIDR" : "10.0.1.0/24" }
    }
  },
 
  "Resources" : {
    "StudentEC2InstanceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "StudentEC2InstancePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeVpcs",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "sqs:*"
                ],
                "Resource": "*"
            }
          ]
        },
        "PolicyName": "StudentEC2InstancePolicy",
        "Roles": [
          {
            "Ref": "StudentEC2InstanceRole"
          }
        ]
      }
    },
    "IamInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "StudentEC2InstanceRole" } ]
      }
    },
 
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
       
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
         { "Key" : "Name", "Value" : "LinuxAcademy" },
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "VPC" }
        ]
      }
    },
     
    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
          "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
        },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public1" }
        ]
      }
    },
 
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
 
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
 
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
 
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
 
    "PublicSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
 
    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
 
    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },
 
    "InboundHTTPSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },
 
    "InboundSSHPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },
 
    "InboundEmphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },
 
    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },
 
    "PublicSubnetNetworkAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
 
"EC2SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the EC2 host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" : "-1",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },
   "SGBaseIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "EC2SecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
      }
    },
 
    "PublicInstance" : {
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
            "InstanceType" : "t2.micro",        
            "ImageId" : "%ami-42%",
            "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "/bin/echo '%password%' | /bin/passwd cloud_user --stdin\n",
                "yum -y update\n",
                "yum -y install python35\n",
                "yum -y install wget\n",
                "yum -y install python35-pip\n",
                "pip-3.5 install boto3 --upgrade\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/create_queue.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/data.json\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/fifo_consumer.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/fifo_producer.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/purge_queue.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/queue_status.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/sqs/lab-files/fifo/sqs_url.py\n",
                "wget https://raw.githubusercontent.com/linuxacademy/aws-cda-2018/master/meta/config/config\n",
                "mv create_queue.py /home/cloud_user/\n",
                "mv data.json /home/cloud_user/\n",
                "mv fifo_consumer.py /home/cloud_user/\n",
                "mv fifo_producer.py /home/cloud_user/\n",
                "mv purge_queue.py /home/cloud_user/\n",
                "mv queue_status.py /home/cloud_user/\n",
                "mv sqs_url.py /home/cloud_user/\n",
                "mkdir /home/cloud_user/.aws\n",
                "mv config /home/cloud_user/.aws/\n"
            ]]}},
            "NetworkInterfaces" : [{
              "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
              "AssociatePublicIpAddress": "true",
              "DeviceIndex"              : "0",
              "DeleteOnTermination"      : "true",
              "SubnetId"                 : { "Ref" : "PublicSubnet1" }
            }],
            "IamInstanceProfile": { "Ref": "IamInstanceProfile"}
        }
    }
   },
  "Outputs" : {
      "pubIpAddress1" : {
        "Description" : "Public ip address of public instance",
        "Value" : { "Fn::GetAtt" : [ "PublicInstance", "PublicIp" ] }
      },
      "privIpAddress1" : {
        "Description" : "Private ip address of public instance",
        "Value" : { "Fn::GetAtt" : [ "PublicInstance", "PrivateIp" ] }
      }
  }
}
