AWSTemplateFormatVersion: "2010-09-09"
Description: Security Specialty - VPC Layered Security

# This is a full 3-tier architecture with 6 subnets (2 public, 4 private)

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.99.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
       - Key: "Name"
         Value: "SysOpsVPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: {"Ref": "VPC"}
      InternetGatewayId: {"Ref": "InternetGateway"}

  DMZ1public:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["0", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.1.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: DMZ1public

  DMZ2public:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["1", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.2.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: DMZ2public

  AppLayer1private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["0", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.11.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: AppLayer1private

  AppLayer2private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["1", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.12.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: AppLayer2private

  DBLayer1private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["0", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.21.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: DBLayer1private

  DBLayer2private:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: {"Fn::Select": ["1", {"Fn::GetAZs": ""}]}
      CidrBlock: "10.99.22.0/24"
      VpcId: {"Ref": "VPC"}
      Tags:
      - Key: Name
        Value: DBLayer2Private

  PublicRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: PublicRT

  # RouteTableAssociationA:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DMZ1public"}
  #     RouteTableId: {"Ref": "PublicRT"}

  # RouteTableAssociationB:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DMZ2public"}
  #     RouteTableId: {"Ref": "PublicRT"}

  # RoutePublicNATToInternet:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: {"Ref": "PublicRT"}
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     GatewayId: {"Ref": "InternetGateway"}
  #   DependsOn: "VPCGatewayAttachment"

  NATElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
    DependsOn: "VPCGatewayAttachment"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: "NATElasticIP"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATElasticIP
          - AllocationId
      SubnetId: !Ref DMZ2public

  # NATGatewayRoute:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: {"Ref": "PrivateRT"}
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: {"Ref": "NATGateway"}

  PrivateRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: PrivateRT

  # RouteTableAssociationC:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "AppLayer1private"}
  #     RouteTableId: {"Ref": "PrivateRT"}

  # RouteTableAssociationD:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "AppLayer2private"}
  #     RouteTableId: {"Ref": "PrivateRT"}

  # RouteTableAssociationE:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DBLayer1private"}
  #     RouteTableId: {"Ref": "PrivateRT"}

  # RouteTableAssociationF:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DBLayer2private"}
  #     RouteTableId: {"Ref": "PrivateRT"}

  DMZNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: DMZNACL

  # SubnetNetworkAclAssociationA:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DMZ1public"}
  #     NetworkAclId: !Ref DMZNACL

  # SubnetNetworkAclAssociationB:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DMZ2public"}
  #     NetworkAclId: !Ref DMZNACL

  # DMZNACLEntryIngress100:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     PortRange:
  #       From: 22
  #       To: 22
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryIngress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 80
  #       To: 80
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryIngress120:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 120
  #     Protocol: 6
  #     PortRange:
  #       From: 443
  #       To: 443
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryIngress130:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 130
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryEgress100:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     PortRange:
  #       From: 22
  #       To: 22
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryEgress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 80
  #       To: 80
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryEgress120:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 120
  #     Protocol: 6
  #     PortRange:
  #       From: 443
  #       To: 443
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  # DMZNACLEntryEgress130:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DMZNACL
  #   Properties:
  #     NetworkAclId: !Ref DMZNACL
  #     RuleNumber: 130
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  AppNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: AppNACL

  # SubnetNetworkAclAssociationC:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "AppLayer1private"}
  #     NetworkAclId: !Ref AppNACL

  # SubnetNetworkAclAssociationD:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "AppLayer2private"}
  #     NetworkAclId: !Ref AppNACL

  # AppNACLEntryIngress100:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     PortRange:
  #       From: 22
  #       To: 22
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "10.99.0.0/16"

  # AppNACLEntryIngress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 80
  #       To: 80
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "10.99.0.0/16"

  # AppNACLEntryIngress120:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 120
  #     Protocol: 6
  #     PortRange:
  #       From: 443
  #       To: 443
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "10.99.0.0/16"

  # AppNACLEntryIngress130:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 130
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # AppNACLEntryEgress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 80
  #       To: 80
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  # AppNACLEntryEgress120:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 120
  #     Protocol: 6
  #     PortRange:
  #       From: 443
  #       To: 443
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "0.0.0.0/0"

  # AppNACLEntryEgress130:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: AppNACL
  #   Properties:
  #     NetworkAclId: !Ref AppNACL
  #     RuleNumber: 130
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "10.99.0.0/16"

  DBNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: DBNACL

  # SubnetNetworkAclAssociationE:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DBLayer1private"}
  #     NetworkAclId: !Ref DBNACL

  # SubnetNetworkAclAssociationF:
  #   Type: "AWS::EC2::SubnetNetworkAclAssociation"
  #   Properties:
  #     SubnetId: {"Ref": "DBLayer2private"}
  #     NetworkAclId: !Ref DBNACL

  # DBNACLEntryIngress100:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DBNACL
  #   Properties:
  #     NetworkAclId: !Ref DBNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     PortRange:
  #       From: 3306
  #       To: 3306
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "10.99.0.0/16"

  # DBNACLEntryIngress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DBNACL
  #   Properties:
  #     NetworkAclId: !Ref DBNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: false
  #     CidrBlock: "0.0.0.0/0"

  # DBNACLEntryEgress100:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DBNACL
  #   Properties:
  #     NetworkAclId: !Ref DBNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     PortRange:
  #       From: 3306
  #       To: 3306
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "10.99.0.0/16"

  # DBNACLEntryEgress110:
  #   Type: "AWS::EC2::NetworkAclEntry"
  #   DependsOn: DBNACL
  #   Properties:
  #     NetworkAclId: !Ref DBNACL
  #     RuleNumber: 110
  #     Protocol: 6
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #     RuleAction: "allow"
  #     Egress: true
  #     CidrBlock: "10.99.0.0/16"

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets: [{"Ref": "DMZ1public"}, {"Ref": "DMZ2public"}]
      Name: "load-balancer"
      Type: "application"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      IpAddressType: ipv4

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /readme.html
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthyThresholdCount: 2
      Name: "TG1"
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole

  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: awscli
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - ec2:*
                  - rds:*
                  - elasticfilesystem:*
                  - logs:*
                  - cloudwatch:*
                Resource: "*"

  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "wordpress-bastion"
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: BastionSG
      # SecurityGroupIngress:
      #   - CidrIp: "0.0.0.0/0"
      #     FromPort: 22
      #     IpProtocol: "tcp"
      #     ToPort: 22

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "wordpress-elb"
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: LoadBalancerSG
      # SecurityGroupIngress:
      #   - CidrIp: "0.0.0.0/0"
      #     FromPort: 80
      #     IpProtocol: "tcp"
      #     ToPort: 80

      #   - CidrIp: "0.0.0.0/0"
      #     FromPort: 443
      #     IpProtocol: "tcp"
      #     ToPort: 443

  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "wordpress-ec2"
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: WebServerSG
      # SecurityGroupIngress:
      #   - FromPort: 22
      #     IpProtocol: "tcp"
      #     SourceSecurityGroupId: {"Ref": "BastionSecurityGroup"}
      #     ToPort: 22

      #   - FromPort: 80
      #     IpProtocol: "tcp"
      #     SourceSecurityGroupId: {"Ref": "LoadBalancerSecurityGroup"}
      #     ToPort: 80

  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "wordpress-rds"
      VpcId: {"Ref": "VPC"}
      Tags:
        - Key: Name
          Value: DatabaseSG
      # SecurityGroupIngress:
      #   - IpProtocol: "tcp"
      #     FromPort: 3306
      #     ToPort: 3306
      #     SourceSecurityGroupId: !Ref WebServerSecurityGroup

  DatabaseCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora
      MasterUsername: "wpuser"
      MasterUserPassword: "Password1"
      VpcSecurityGroupIds: [{"Fn::GetAtt": ["DatabaseSecurityGroup", "GroupId"]}]
      DBSubnetGroupName: !Ref DBSubnetGroup

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: db.t2.medium
      DBSubnetGroupName: !Ref "DBSubnetGroup"

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DB subnet group"
      SubnetIds:
        - !Ref DBLayer1private
        - !Ref DBLayer2private

  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    DependsOn: [DatabaseCluster, LoadBalancer]
    Properties:
      ImageId: '%ami-43%'
      InstanceType: t2.micro
      IamInstanceProfile: !Ref WebInstanceProfile
      SecurityGroups: [!Ref WebServerSecurityGroup]
      AssociatePublicIpAddress: false

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd24 mysql php70 php70-mysqlnd
          cd /var/www/html
          wget -q -T 60 https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/bin/wp
          wp core download --allow-root --version=4.9.7
          wp core config --dbname='wordpress' --dbuser='wpuser' --dbpass='Password1' --dbhost='${DatabaseCluster.Endpoint.Address}' --allow-root
          wp db create --allow-root
          wp core install --url='http://${LoadBalancer.DNSName}' --title='Linux Academy' --admin_user='wpuser' --admin_password='Password1' --admin_email='support@linuxacademy.com' --skip-email --allow-root
          chown -R apache:apache /var/www/html
          chmod u+wrx /var/www/html/wp-content/*
          echo '<?php phpinfo(); ?>' > /var/www/html/phpinfo.php
          service httpd start
          chkconfig httpd on
      InstanceMonitoring: true

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroup
      LaunchConfigurationName: {"Ref": "LaunchConfiguration"}
      MinSize: "2"
      MaxSize: "2"
      DesiredCapacity: "2"
      Cooldown: "300"
      HealthCheckGracePeriod: 300
      HealthCheckType: "ELB"
      VPCZoneIdentifier: [{"Ref": "AppLayer1private"}, {"Ref": "AppLayer2private"}]
      Tags:
        - PropagateAtLaunch: true
          Value: "instance-wordpress"
          Key: "Name"

  BastionLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: '%ami-43%'
      InstanceType: t2.micro # {"Ref": "WebServerInstanceType"}
      IamInstanceProfile: !Ref WebInstanceProfile
      SecurityGroups: [{"Ref": "BastionSecurityGroup"}]
      AssociatePublicIpAddress: true
      InstanceMonitoring: true

  BastionAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: {"Ref": "BastionLaunchConfig"}
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      Cooldown: "300"
      HealthCheckGracePeriod: 300
      HealthCheckType: "EC2"
      VPCZoneIdentifier: [{"Ref": "DMZ1public"}, {"Ref": "DMZ2public"}]
      Tags:
        - PropagateAtLaunch: true
          Value: "bastion-host"
          Key: "Name"

# To SSH into Wordpress instance:

# 1. SSH into bastion as cloud_user password 123456
# 2. SSH into instance-wordpress password 123456

# The following are commented out in this learning activity:

# PublicRT - 0.0.0.0/0 to Internet Gateway (DMZ1&2public)
# PrivateRT - 0.0.0.0/0 to NAT Gateway (AppLayer1&2private, DBLayer1&2private)

# DatabaseSG - inbound 3306 from WebServerSG, outbound 0.0.0.0/0
# BastionSG - inbound 22 from 0.0.0.0/0, outbound 0.0.0.0/0
# LoadBalancerSG - inbound 80 from 0.0.0.0/0
#                  inbound 443 from 0.0.0.0/0
#                  outbound 0.0.0.0/0
# WebServerSG - inbound 80 from LoadBalancerSG
#               inbound 22 from BastionSG
#               outbound 0.0.0.0/0

# DMZNACL - 2 subnets: DMZ1public & DMZ2public
# DMZNACL - inbound 22, 80, 443, 1024-65535 allow 0.0.0.0/0
#          - inbound ALL deny 0.0.0.0/0
#          - outbound 22, 80, 443, 1024-65535 allow 0.0.0.0/0
#          - outbound ALL deny 0.0.0.0/0

# AppNACL - 2 subnets: AppLayer1private & AppLayer2private
# AppNACL - inbound 22, 80, 443, allow 10.99.0.0/16
#         - inbound 1024-65535 allow 0.0.0.0/0
#         - inbound ALL deny 0.0.0.0/0
#         - outbound 80, 443 allow 0.0.0.0/0
#         - outbound 1024-65535 allow 10.99.0.16
#         - outbound ALL deny 0.0.0.0/0

# DBNACL - 2 subnets: DBLayer1private & DBLayer2private
# DBNACL - inbound 3306 allow 10.99.0.0/16
#        - inbound 1024-65535 allow 0.0.0.0/0
#        - inbound ALL deny 0.0.0.0/0
#        - outbound 3306 allow 10.99.0.0/16
#        - outbound 1024-65535 allow 10.99.0.0/16
#        - outbound ALL deny 0.0.0.0/0

