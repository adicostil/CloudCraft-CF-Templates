AWSTemplateFormatVersion: "2010-09-09"

Description: >
    Install an IPS on an EC2 Instance - Security Specialty. This template
    deploys a VPC, with a public subnet. It deploys an Internet Gateway, with a
    default route on the public subnet. It also deploys two EC2 instances in
    the public subnet.

# CloudCraft: https://cloudcraft.linuxacademy.com/#/labs/details/5e205259-f2df-4b17-b21b-c543edab5ac2?courseId=203
# Lucidchart: https://www.lucidchart.com/documents/edit/b3d728a5-ce3e-4d2b-b70f-6aaa69b1da6e/0

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.99.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
       - Key: "Name"
         Value: "SysOpsVPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  DMZ:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      CidrBlock: "10.99.1.0/24"
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: DMZ

  PublicRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT

  RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref DMZ
      RouteTableId: !Ref PublicRT

  RoutePublicNATToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  DMZNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZNACL

  SubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DMZ
      NetworkAclId: !Ref DMZNACL

  DMZNACLEntryIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"

  DMZNACLEntryIngress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: "allow"
      Egress: false
      CidrBlock: "0.0.0.0/0"

  DMZNACLEntryEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"

  DMZNACLEntryEgress110:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"

  DMZNACLEntryEgress120:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 120
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"

  DMZNACLEntryEgress130:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: 130
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "InstanceSG"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: InstanceSG
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22

  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: '%ami-43%' # ami-14c5486b
      InstanceType: t2.micro
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: 'fail2ban'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref DMZ
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /bin/echo '%password%' | /bin/passwd cloud_user --stdin
          yum update -y
          mkdir /home/cloud_user/.aws
          echo -e '[default]\nregion = us-east-1' > /home/cloud_user/.aws/config

  EC2InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: '%ami-43%' # ami-14c5486b
      InstanceType: t2.micro
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: 'hacker'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref DMZ
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /bin/echo '%password%' | /bin/passwd cloud_user --stdin
          yum update -y
          mkdir /home/cloud_user/.aws
          echo -e '[default]\nregion = us-east-1' > /home/cloud_user/.aws/config

Outputs:

  pubIpAddress1:
    Description: Public IP address of EC2Instance A
    Value: !GetAtt EC2InstanceA.PublicIp

  pubIpAddress2:
    Description: Public IP address of EC2Instance B
    Value: !GetAtt EC2InstanceB.PublicIp

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  DMZ:
    Description: A reference to the public subnet
    Value: !Ref DMZ
