{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "\nThis template creates a complete ECS Cluster with the following resources:\n- A tiered VPC with public and private subnets. - A highly available ECS cluster deployed across two Availability Zones in an\n  Auto Scaling group and that are AWS SSM enabled.\n- A pair of NAT gateways (one in each zone) to handle outbound traffic. - Centralized container logging with Amazon CloudWatch Logs. - Task Definition (nginx).\n",
    "Parameters": {
        "EnvironmentName": {
            "Type": "String",
            "Default": "Lab"
        },
        "InstanceType": {
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "m1.small",
                "m1.large"
            ]
        },
        "ClusterSize": {
            "Type": "Number",
            "Default": 4,
            "AllowedValues": [
                1,
                2,
                3,
                4
            ]
        }
    },
    "Mappings": {
        "AWSRegionToAMI": {
            "us-east-1": {
                "AMI": "ami-00129b193dc81bc31"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.8.0/21",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    "Public-AZ1"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.16.0/21",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    "Public-AZ2"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.24.0/21",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    "Private-AZ1"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.0.32.0/21",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    "Private-AZ2"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "1",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatPublicIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "NatPublicIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "VPC",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "BastionSG",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BastionSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "IpProtocol": "tcp",
                        "ToPort": 22
                    }
                ]
            }
        },
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "%ami-43%",
                "InstanceType": "t2.micro",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "bastion"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": "0",
                        "DeleteOnTermination": true,
                        "SubnetId": {
                            "Ref": "PublicSubnet1"
                        },
                        "GroupSet": [
                            {
                                "Ref": "BastionSecurityGroup"
                            }
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n/bin/echo '%password%' | /bin/passwd cloud_user --stdin\nyum update -y\nmkdir /home/cloud_user/.aws\necho -e '[default]\\nregion = us-east-1' > /home/cloud_user/.aws/config\n"
                    }
                }
            }
        },
        "ECSHostSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Access to the ECS hosts and the tasks/containers that run on them",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "EnvironmentName"
                                    },
                                    "ECS-Hosts"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Ref": "EnvironmentName"
                }
            }
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ECSLaunchConfiguration"
                },
                "MinSize": {
                    "Ref": "ClusterSize"
                },
                "MaxSize": {
                    "Ref": "ClusterSize"
                },
                "DesiredCapacity": {
                    "Ref": "ClusterSize"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${EnvironmentName} ECS host"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 1,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT15M",
                    "SuspendProcesses": [
                        "HealthCheck",
                        "ReplaceUnhealthy",
                        "AZRebalance",
                        "AlarmNotification",
                        "ScheduledActions"
                    ],
                    "WaitOnResourceSignals": true
                }
            }
        },
        "ECSLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionToAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ECSHostSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "ECSInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\nyum install -y aws-cfn-bootstrap hibagent\n/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup\n/usr/bin/enable-ec2-spot-hibernation\n"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "commands": {
                            "01_add_instance_to_cluster": {
                                "command": {
                                    "Fn::Sub": "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "mode": 256,
                                "owner": "root",
                                "group": "root",
                                "content": {
                                    "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
                                }
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n"
                                }
                            },
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Sub": "[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${AWS::Region}\n"
                                }
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Sub": "[general]\nstate_file = /var/lib/awslogs/agent-state\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_group_name = ${ECSCluster}-/var/log/dmesg\nlog_stream_name = ${ECSCluster}\n[/var/log/messages]\nfile = /var/log/messages\nlog_group_name = ${ECSCluster}-/var/log/messages\nlog_stream_name = ${ECSCluster}\ndatetime_format = %b %d %H:%M:%S\n[/var/log/docker]\nfile = /var/log/docker\nlog_group_name = ${ECSCluster}-/var/log/docker\nlog_stream_name = ${ECSCluster}\ndatetime_format = %Y-%m-%dT%H:%M:%S.%f\n[/var/log/ecs/ecs-init.log]\nfile = /var/log/ecs/ecs-init.log.*\nlog_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log\nlog_stream_name = ${ECSCluster}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n[/var/log/ecs/ecs-agent.log]\nfile = /var/log/ecs/ecs-agent.log.*\nlog_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log\nlog_stream_name = ${ECSCluster}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n[/var/log/ecs/audit.log]\nfile = /var/log/ecs/audit.log.*\nlog_group_name = ${ECSCluster}-/var/log/ecs/audit.log\nlog_stream_name = ${ECSCluster}\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n"
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                },
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/awslogs/awslogs.conf",
                                        "/etc/awslogs/awscli.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "ECSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "RoleName": {
                    "Fn::Sub": "${EnvironmentName}-ECSRole-${AWS::Region}"
                },
                "AssumeRolePolicyDocument": "{\n    \"Statement\": [{\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ec2.amazonaws.com\"\n        }\n    }]\n}\n",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": "{\n    \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"ecs:CreateCluster\",\n            \"ecs:DeregisterContainerInstance\",\n            \"ecs:DiscoverPollEndpoint\",\n            \"ecs:Poll\",\n            \"ecs:RegisterContainerInstance\",\n            \"ecs:StartTelemetrySession\",\n            \"ecs:Submit*\",\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\",\n            \"ecr:BatchCheckLayerAvailability\",\n            \"ecr:BatchGetImage\",\n            \"ecr:GetDownloadUrlForLayer\",\n            \"ecr:GetAuthorizationToken\",\n            \"ssm:DescribeAssociation\",\n            \"ssm:GetDeployablePatchSnapshotForInstance\",\n            \"ssm:GetDocument\",\n            \"ssm:GetManifest\",\n            \"ssm:GetParameters\",\n            \"ssm:ListAssociations\",\n            \"ssm:ListInstanceAssociations\",\n            \"ssm:PutInventory\",\n            \"ssm:PutComplianceItems\",\n            \"ssm:PutConfigurePackageResult\",\n            \"ssm:UpdateAssociationStatus\",\n            \"ssm:UpdateInstanceAssociationStatus\",\n            \"ssm:UpdateInstanceInformation\",\n            \"ec2messages:AcknowledgeMessage\",\n            \"ec2messages:DeleteMessage\",\n            \"ec2messages:FailMessage\",\n            \"ec2messages:GetEndpoint\",\n            \"ec2messages:GetMessages\",\n            \"ec2messages:SendReply\",\n            \"cloudwatch:PutMetricData\",\n            \"ec2:DescribeInstanceStatus\",\n            \"ds:CreateComputer\",\n            \"ds:DescribeDirectories\",\n            \"logs:CreateLogGroup\",\n            \"logs:CreateLogStream\",\n            \"logs:DescribeLogGroups\",\n            \"logs:DescribeLogStreams\",\n            \"logs:PutLogEvents\",\n            \"s3:PutObject\",\n            \"s3:GetObject\",\n            \"s3:AbortMultipartUpload\",\n            \"s3:ListMultipartUploadParts\",\n            \"s3:ListBucket\",\n            \"s3:ListBucketMultipartUploads\"\n        ],\n        \"Resource\": \"*\"\n    }]\n}\n"
                    }
                ]
            }
        },
        "ECSInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ECSRole"
                    }
                ]
            }
        },
        "ECSServiceAutoScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Action": [
                            "sts:AssumeRole"
                        ],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "application-autoscaling.amazonaws.com"
                            ]
                        }
                    }
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service-autoscaling",
                        "PolicyDocument": {
                            "Statement": {
                                "Effect": "Allow",
                                "Action": [
                                    "application-autoscaling:*",
                                    "cloudwatch:DescribeAlarms",
                                    "cloudwatch:PutMetricAlarm",
                                    "ecs:DescribeServices",
                                    "ecs:UpdateService"
                                ],
                                "Resource": "*"
                            }
                        }
                    }
                ]
            }
        },
        "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-nginx"
                        ]
                    ]
                },
                "RequiresCompatibilities": [
                    "EC2"
                ],
                "ContainerDefinitions": [
                    {
                        "Name": "nginx",
                        "Essential": true,
                        "Image": "nginx:latest",
                        "Memory": 128,
                        "PortMappings": [
                            {
                                "ContainerPort": 8000
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "AWS::StackName"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "CloudWatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Ref": "AWS::StackName"
                },
                "RetentionInDays": 7
            }
        }
    },
    "Outputs": {
        "pubIpAddress1": {
            "Description": "Bastion Host IP",
            "Value": {
                "Fn::GetAtt": [
                    "BastionInstance",
                    "PublicIp"
                ]
            }
        },
        "VPC": {
            "Description": "A reference to the created VPC",
            "Value": {
                "Ref": "VPC"
            }
        },
        "PublicSubnets": {
            "Description": "A list of the public subnets",
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "PublicSubnet1"
                        },
                        {
                            "Ref": "PublicSubnet2"
                        }
                    ]
                ]
            }
        },
        "PrivateSubnets": {
            "Description": "A list of the private subnets",
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "PrivateSubnet1"
                        },
                        {
                            "Ref": "PrivateSubnet2"
                        }
                    ]
                ]
            }
        },
        "PublicSubnet1": {
            "Description": "A reference to the public subnet in the 1st Availability Zone",
            "Value": {
                "Ref": "PublicSubnet1"
            }
        },
        "PublicSubnet2": {
            "Description": "A reference to the public subnet in the 2nd Availability Zone",
            "Value": {
                "Ref": "PublicSubnet2"
            }
        },
        "PrivateSubnet1": {
            "Description": "A reference to the private subnet in the 1st Availability Zone",
            "Value": {
                "Ref": "PrivateSubnet1"
            }
        },
        "PrivateSubnet2": {
            "Description": "A reference to the private subnet in the 2nd Availability Zone",
            "Value": {
                "Ref": "PrivateSubnet2"
            }
        },
        "ECSHostSecurityGroup": {
            "Description": "A reference to the security group for ECS hosts",
            "Value": {
                "Ref": "ECSHostSecurityGroup"
            }
        },
        "Cluster": {
            "Description": "A reference to the ECS cluster",
            "Value": {
                "Ref": "ECSCluster"
            }
        },
        "ECSServiceAutoScalingRole": {
            "Description": "A reference to ECS service auto scaling role",
            "Value": {
                "Fn::GetAtt": [
                    "ECSServiceAutoScalingRole",
                    "Arn"
                ]
            }
        },
        "ECSAutoScalingGroupName": {
            "Description": "A reference to ECS AutoScaling Group Name",
            "Value": {
                "Ref": "ECSAutoScalingGroup"
            }
        }
    }
}