{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Amazon ECS Deep Dive - Learning Activity - Using Parameter Store",
    "Parameters": {
        "DesiredCapacity": {
            "Type": "Number",
            "Default": "1",
            "Description": "Number of desired instances in the AutoScaling Group and ECS Cluster"
        },
        "MaxSize": {
            "Type": "Number",
            "Default": "1",
            "Description": "Maximum number of instances in the AutoScaling Group and ECS Cluster"
        },
        "ECSAMI": {
            "Description": "AMI ID",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"
        },
        "InstanceType": {
            "Description": "The EC2 instance type",
            "Default": "t2.micro",
            "Type": "String"
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "HTTPLocation": {
            "Description": " The IP address range that can be used to HTTP to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "PublicOne": {
                "CIDR": "10.0.0.0/24"
            },
            "PublicTwo": {
                "CIDR": "10.0.1.0/24"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                }
            }
        },
        "PublicSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicOne",
                        "CIDR"
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicTwo",
                        "CIDR"
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayAttachement": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachement",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetOneRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetOne"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetTwoRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetTwo"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "ParameterStoreAccessTest": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead"
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "PublicReadForGetBucketObjects",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "ParameterStoreAccessTest"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "ParameterStoreAccessTest"
                }
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnetOne"
                    },
                    {
                        "Ref": "PublicSubnetTwo"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ContainerInstances"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "MaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "DesiredCapacity"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "ContainerInstances": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "01_add_instance_to_cluster": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "echo ECS_CLUSTER=",
                                            {
                                                "Ref": "ECSCluster"
                                            },
                                            " >> /etc/ecs/ecs.config"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource ContainerInstances ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "ECSAMI"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ContainerInstances ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ECSAutoScalingGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": {
                            "Ref": "HTTPLocation"
                        }
                    }
                ]
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:Describe*",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AmazonEC2ContainerServiceAutoscaleRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "application-autoscaling.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecsautoscaling",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:DescribeServices",
                                        "ecs:UpdateService"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:DescribeAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Policies": [
                    {
                        "PolicyName": "ecs-instance",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "logs:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2Role"
                    }
                ]
            }
        },
        "ProdApp1Key": {
            "Type": "AWS::KMS::Key",
            "Properties": {
                "Description": "prod-app1",
                "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "prod-app1",
                    "Statement": [
                        {
                            "Sid": "Allow administration of the key",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": [
                                "kms:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "ProdApp1Alias": {
            "Type": "AWS::KMS::Alias",
            "Properties": {
                "AliasName": "alias/prod-app1",
                "TargetKeyId": {
                    "Ref": "ProdApp1Key"
                }
            }
        },
        "LicenseCodeKey": {
            "Type": "AWS::KMS::Key",
            "Properties": {
                "Description": "license-code",
                "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "license-code",
                    "Statement": [
                        {
                            "Sid": "Allow administration of the key",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": [
                                "kms:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "LicenseCodeAlias": {
            "Type": "AWS::KMS::Alias",
            "Properties": {
                "AliasName": "alias/license-code",
                "TargetKeyId": {
                    "Ref": "LicenseCodeKey"
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:*",
                                        "ssm:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "BotoCustomResource": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Runtime": "python3.6",
                "Timeout": 30,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "import boto3\nimport json\nfrom botocore.vendored import requests\n\n\ndef lambda_handler(event, context):\n\n    kms_client = boto3.client('kms')\n    ssm_client = boto3.client('ssm')\n\n    res = kms_client.describe_key(KeyId='alias/prod-app1')\n    prodApp1Key = res['KeyMetadata']['KeyId']\n    print('prod-app1:', prodApp1Key)\n\n    res = kms_client.describe_key(KeyId='alias/license-code')\n    licenseCodeKey = res['KeyMetadata']['KeyId']\n    print('license-code:', licenseCodeKey)\n\n    response = ssm_client.put_parameter(\n        Name='prod.app1.db-pass',\n        Description='Production Application 1 DB Password',\n        Value='P@ssw0rd1',\n        Type='SecureString',\n        KeyId=prodApp1Key,\n        Overwrite=True,\n    )\n\n    print('RESPONSE:n' + json.dumps(response))\n\n    response = ssm_client.put_parameter(\n        Name='prod.app2.user-name',\n        Description='Production Application 2 Username',\n        Value='johnsmith',\n        Type='String',\n        Overwrite=True,\n    )\n\n    print('RESPONSE:n' + json.dumps(response))\n\n    response = ssm_client.put_parameter(\n        Name='general.license-code',\n        Description='General license code',\n        Value='xJee2HesQy0',\n        Type='SecureString',\n        KeyId=licenseCodeKey,\n        Overwrite=True,\n    )\n\n    print('RESPONSE:n' + json.dumps(response))\n\n    responseStatus = 'SUCCESS'\n    responseData = {}\n\n    if event['RequestType'] == 'Delete':\n        sendResponse(event, context, responseStatus, responseData)\n\n    responseData = {'Success': 'Lambda function invoked'}\n    sendResponse(event, context, responseStatus, responseData)\n\n\ndef sendResponse(event, context, responseStatus, responseData):\n    responseBody = {'Status': responseStatus,\n                    'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n                    'PhysicalResourceId': context.log_stream_name,\n                    'StackId': event['StackId'],\n                    'RequestId': event['RequestId'],\n                    'LogicalResourceId': event['LogicalResourceId'],\n                    'Data': responseData}\n    print('RESPONSE BODY:n' + json.dumps(responseBody))\n    try:\n        req = requests.put(event['ResponseURL'], data=json.dumps(responseBody))\n        if req.status_code != 200:\n            print(req.text)\n            raise Exception(\n                'Recieved non 200 response while sending response to CFN.')\n        return\n    except requests.exceptions.RequestException as e:\n        print(e)\n        raise\n"
                }
            }
        },
        "InvokeBotoCustomResource": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": [
                "ProdApp1Alias",
                "LicenseCodeAlias"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "BotoCustomResource",
                        "Arn"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "ProdApp1Key": {
            "Description": "Production App 1 KMS Key",
            "Value": {
                "Ref": "ProdApp1Key"
            }
        },
        "LicenseCodeKey": {
            "Description": "License code KMS key",
            "Value": {
                "Ref": "LicenseCodeKey"
            }
        },
        "pubIpAddress1": {
            "Description": "S3 URI for access-test.sh",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ParameterStoreAccessTest",
                                "DomainName"
                            ]
                        },
                        "/access-test.sh"
                    ]
                ]
            }
        }
    }
}