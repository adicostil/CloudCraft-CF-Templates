AWSTemplateFormatVersion: '2010-09-09'

# This template boots an EC2 instance, and installs the CloudWacth Logs agent. 
# Two CloudWatch Metric Filters and Alarms are configured to catch suspicious SSH activity.
#
# This environment contains 3 deliberate "breaks" that the student is required to
# fix in order to solve the learning activity:
#   1. The threshold on the alarm is set to 222 sec instead of 2 sec.
#      A threshold that high will never trigger in the lab unless they script an
#      SSH attack (unlikely), so the student needs to set to 2 sec.
#   2. Lambda function is not subscribed to the SNS topic
#      Student needs to subscribe the Lambda function StopInstance to the topic
#   3. Student needs to subscribe their email to the topic
#
# Heavily inspired by:
# https://aws.amazon.com/blogs/security/how-to-monitor-and-visualize-failed-ssh-access-attempts-to-amazon-ec2-linux-instances
# https://s3.amazonaws.com/awsiammedia/public/sample/MonitorSSHActivities/CloudWatchLogs_ssh.yaml
#
# CloudCraft: 
# https://cloudcraft.linuxacademy.com/#/labs/details/4005a6bb-1daf-42d7-aa25-033f87c68927?courseId=203

Description: AWS CloudFormation Template for 'Troubleshooting a Detection, Alerting, and Response Workflow'


Resources:

  VPC:
    Type: AWS::EC2::VPC    
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: LinuxAcademy
        - Key: Network
          Value: VPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet'
      RouteTableId: !Ref 'RouteTable'

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'

  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22

  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535

  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 80
        To: 80

  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  # define the EC2 assume rule
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:Create*
            - logs:PutLogEvents
            - logs:Describe*
            Resource:
            - arn:aws:logs:*:*:*

  LogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: LogRole

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
   
  # EC2 Server configuration:
  # - Install PHP & httpd
  # - Create temp CloudWatch Log agent configuration file, define log file, group and stream name
  # - Save stack metadata
  # - Start related services
  # - Use 'User Data' to install CloudWatch Log agent, send signal to stack upon sucessfull agent installation and initilization
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple PHP application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:            
              httpd: []              
          files:
            "/tmp/cwlogs/sshaccess.conf":
              content: !Sub |
                [general]
                state_file= /var/awslogs/agent-state
                [/var/log/secure]
                file = /var/log/secure
                log_group_name = ${WebServerLogGroup}
                log_stream_name = {instance_id}/ssh.log
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000400'
              owner: "root"
              group: "root"
            "/var/www/html/index.html":
              content: <h1>AWS CloudFormation sample PHP application</h1>
              mode: '000644'
              owner: apache
              group: apache
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      ImageId: '%ami-43%'
      InstanceType: t2.micro
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref Subnet
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Truncate /var/log/secure to prevent old messages from showing up in the log
            truncate -s 0 /var/log/secure
            # Set cloud_user password
            /bin/echo '%password%' | /bin/passwd cloud_user --stdin
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r WebServerInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # Get the CloudWatch Logs agent
            wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            # Install the CloudWatch Logs agent
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/sshaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
  
  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: 7

  # InvalidSSHLogin and InvalidSSHLoginAlarm:  
  # Failed login attempts will appear in /var/log/secure like this:
  # Jun 13 21:18:51 ip-10-0-1-212 sshd[8884]: Failed password for cloud_user from 73.125.25.100 port 47696 ssh2
  # So we are filtering on the word "Failed" (case sensitive)
  InvalidSSHLogin:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: WebServerLogGroup
      FilterPattern: "[Mon, day, timestamp, ip, id, status = Failed, ...]"
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: SSH
        MetricName: InvalidSSHLogin

  InvalidSSHLoginAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Invalid login attempts >2 in 1 min for instance ${WebServerInstance}'
      MetricName: InvalidSSHLogin
      Namespace: SSH
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 222 # this is one of the 'breaks' - it should be 2 seconds
      AlarmActions:
      - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanThreshold

  SSHDisconnectRequest:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: WebServerLogGroup
      FilterPattern: "[Mon, day, timestamp, ip, id, msg1, msg2 = disconnect, ...]"
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: SSH
        MetricName: SSHDisconnectRequest

  SSHDisconnectRequestAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Disconnect requests >10 in 5 min for instance ${WebServerInstance}'
      MetricName: SSHDisconnectRequest
      Namespace: SSH
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 10
      AlarmActions:
      - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanThreshold
  
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    # The topic is left unsubscribed to the Lambda function - this is one of the 
    # 'breaks' that the student will need to fix
    # Properties:      
    #   Subscription:
    #     - Endpoint: !GetAtt StopInstance.Arn
    #       Protocol: lambda
    #DependsOn:
    #  - StopInstance

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      # SourceArn: !Ref AlarmNotificationTopic
      FunctionName: !GetAtt StopInstance.Arn

  StopInstance:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Extract the EC2 instance ID from the Alarm Description, and stop the instance.      
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 5
      Code:
        ZipFile: |
          import boto3
          import json


          def lambda_handler(event, context):
              '''
              Extract the EC2 instance ID from the Alarm Description, and stop the
              instance.
              '''

              try:
                  json_message = event['Message']
                  message = json.loads(json_message)
                  instance = message['AlarmDescription'].split()[-1]

                  print("Instance: " + instance)

                  ec2 = boto3.client('ec2')
                  ec2.stop_instances(InstanceIds=[instance])

                  print('Stopped instance: ' + instance)
              except Exception as e:
                  print('Error: ' + e)
              
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'

  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ec2:StopInstance'
              - 'sns:Publish'            
            Resource: '*'
      Roles:
        - !Ref LambdaExecutionRole


Outputs:
  InstanceId:
    Description: The instance ID of the first web server
    Value: !Ref WebServerInstance  
  WebsiteURL:
    Value: !Sub 'http://${WebServerInstance.PublicDnsName}'
    Description: URL for Web Server
  pubIpAddress1:
    Description: Public IP address of Web Server
    Value: !GetAtt WebServerInstance.PublicIp
  privIpAddress1:
    Description: Private IP address of Web Server
    Value: !GetAtt WebServerInstance.PrivateIp
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref WebServerLogGroup
